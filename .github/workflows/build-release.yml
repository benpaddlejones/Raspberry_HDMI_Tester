name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (from release-config.json or override)'
        required: false
        default: ''
      force_rebuild:
        description: 'Force rebuild (ignore cache)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read release configuration
        id: config
        run: |
          # Read config file
          CONFIG_VERSION=$(jq -r '.version' .github/release-config.json)
          CONFIG_NAME=$(jq -r '.name' .github/release-config.json)
          CONFIG_PRERELEASE=$(jq -r '.prerelease' .github/release-config.json)

          # Use input version if provided, otherwise use config
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="$CONFIG_VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$CONFIG_NAME" >> $GITHUB_OUTPUT
          echo "prerelease=$CONFIG_PRERELEASE" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

          echo "üì¶ Building release: v$VERSION ($CONFIG_NAME)"

      - name: Install build dependencies
        run: |
          echo "üì• Installing build tools..."
          sudo apt-get update
          sudo apt-get install -y \
            qemu-user-static \
            debootstrap \
            kpartx \
            parted \
            git \
            zip \
            coreutils \
            quilt \
            libarchive-tools \
            arch-test \
            binfmt-support \
            qemu-utils

          echo "‚úÖ Dependencies installed"

      - name: Install pi-gen
        run: |
          echo "üì• Installing pi-gen..."
          sudo git clone https://github.com/RPi-Distro/pi-gen /opt/pi-gen
          echo "‚úÖ pi-gen installed at /opt/pi-gen"

      - name: Cache pi-gen downloads
        if: ${{ !inputs.force_rebuild }}
        uses: actions/cache@v3
        with:
          path: |
            /opt/pi-gen/work
            /opt/pi-gen/deploy
          key: pi-gen-cache-${{ hashFiles('build/config') }}
          restore-keys: |
            pi-gen-cache-

      - name: Build Raspberry Pi image
        run: |
          echo "üî® Starting image build..."
          echo "‚è±Ô∏è  This will take approximately 45-60 minutes"
          echo ""

          # Setup timestamped log filename
          BUILD_TIMESTAMP=$(date -u '+%Y-%m-%d_%H-%M-%S')
          echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}" >> $GITHUB_ENV

          # Make scripts executable
          chmod +x ./scripts/build-image.sh
          chmod +x ./scripts/logging-utils.sh

          # Run build (logging handled by build-image.sh)
          BUILD_EXIT_CODE=0
          sudo -E ./scripts/build-image.sh || BUILD_EXIT_CODE=$?

          # Store exit code for later steps
          echo "BUILD_EXIT_CODE=${BUILD_EXIT_CODE}" >> $GITHUB_ENV

          # Ensure we can access the log file
          if [ -f "build/pi-gen-work/build-detailed.log" ]; then
            sudo chown -R runner:runner build/pi-gen-work/build-detailed.log
          fi

          if [ ${BUILD_EXIT_CODE} -ne 0 ]; then
            echo ""
            echo "‚ùå Build failed with exit code ${BUILD_EXIT_CODE}"
            echo "üìù Detailed log will be uploaded as artifact and committed to repository"
            exit ${BUILD_EXIT_CODE}
          fi

          echo ""
          echo "‚úÖ Image build complete"
          echo "ÔøΩ Detailed log available at: build/pi-gen-work/build-detailed.log"

      - name: Upload build logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.BUILD_TIMESTAMP }}
          path: build/pi-gen-work/build-detailed.log
          retention-days: 90
          if-no-files-found: warn

      - name: Commit build logs to repository
        if: always()
        run: |
          BUILD_TIMESTAMP="${{ env.BUILD_TIMESTAMP }}"
          BUILD_EXIT_CODE="${{ env.BUILD_EXIT_CODE }}"
          VERSION="${{ steps.config.outputs.version }}"

          # Create logs directories
          mkdir -p logs/successful-builds
          mkdir -p logs/failed-builds

          # Determine log destination and filename
          if [ "${BUILD_EXIT_CODE}" = "0" ]; then
            LOG_DIR="logs/successful-builds"
            LOG_FILE="${LOG_DIR}/build-${BUILD_TIMESTAMP}_v${VERSION}.log"
            echo "üìù Committing successful build log..."
          else
            LOG_DIR="logs/failed-builds"
            LOG_FILE="${LOG_DIR}/build-${BUILD_TIMESTAMP}_FAILED.log"
            echo "üìù Committing failed build log..."
          fi

          # Copy log to repository or create error report
          if [ -f "build/pi-gen-work/build-detailed.log" ]; then
            cp build/pi-gen-work/build-detailed.log "${LOG_FILE}"
            echo "‚úÖ Log file copied"
          elif [ "${BUILD_EXIT_CODE}" != "0" ]; then
            # Build failed before log was created - create minimal error log
            echo "‚ö†Ô∏è  Build log file not found - creating minimal error report"
            {
              echo "================================================================"
              echo "  RASPBERRY PI HDMI TESTER - BUILD LOG (INCOMPLETE)"
              echo "================================================================"
              echo ""
              echo "Build Started: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              echo "Build ID: ${GITHUB_RUN_ID}"
              echo "Build Number: ${GITHUB_RUN_NUMBER}"
              echo "Commit: ${GITHUB_SHA}"
              echo "Branch: ${GITHUB_REF_NAME}"
              echo ""
              echo "STATUS: FAILED EARLY (before detailed log could be created)"
              echo ""
              echo "The build failed before the detailed logging system could initialize."
              echo "This typically indicates:"
              echo "- Missing directory creation (build/pi-gen-work not created)"
              echo "- Permission issues with log file path"
              echo "- Script error before logging initialization"
              echo ""
              echo "Check the GitHub Actions workflow output for the actual error message."
              echo ""
              echo "To debug:"
              echo "1. View the workflow run logs in GitHub Actions"
              echo "2. Look for errors in the 'Build Raspberry Pi image' step"
              echo "3. Check if directories exist and are writable"
              echo ""
              echo "================================================================"
              echo "  END OF ERROR REPORT"
              echo "================================================================"
            } > "${LOG_FILE}"
            echo "‚úÖ Minimal error log created"
          else
            echo "‚ö†Ô∏è  Build log file not found at build/pi-gen-work/build-detailed.log"
            echo "Build succeeded but no log - this should not happen"
            # Don't commit anything if log is missing on successful build
            exit 0
          fi

          # Compress if larger than 50MB to stay within GitHub limits
          if [ -f "${LOG_FILE}" ]; then
            LOG_SIZE=$(stat -f%z "${LOG_FILE}" 2>/dev/null || stat -c%s "${LOG_FILE}")
            if [ ${LOG_SIZE} -gt 52428800 ]; then
              echo "‚ö†Ô∏è  Log file is large ($(( LOG_SIZE / 1048576 ))MB), compressing..."
              gzip "${LOG_FILE}"
              LOG_FILE="${LOG_FILE}.gz"
            fi

            # Configure git
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"

            # Add and commit log
            git add "${LOG_FILE}"
            git add logs/README.md logs/.gitkeep 2>/dev/null || true

            if [ "${BUILD_EXIT_CODE}" = "0" ]; then
              git commit -m "logs: Add successful build log for v${VERSION} [${BUILD_TIMESTAMP}]" || echo "No changes to commit"
            else
              git commit -m "logs: Add failed build log [${BUILD_TIMESTAMP}]" || echo "No changes to commit"
            fi

            # Push (only if build succeeded - for failed builds we'll push at the end)
            if [ "${BUILD_EXIT_CODE}" = "0" ]; then
              git pull --rebase
              git push || echo "‚ö†Ô∏è  Failed to push logs"
              echo "‚úÖ Build log committed and pushed"
            else
              echo "‚úÖ Build log committed (will push at workflow end)"
            fi
          fi

      - name: Prepare release assets
        id: assets
        run: |
          echo "üì¶ Preparing release assets..."

          VERSION="${{ steps.config.outputs.version }}"
          DEPLOY_DIR="build/pi-gen-work/deploy"

          # Verify deploy directory exists (should be caught in build step, but double-check)
          if [ ! -d "${DEPLOY_DIR}" ]; then
            echo "‚ùå Error: Deploy directory does not exist at ${DEPLOY_DIR}"
            echo "The build may have failed. Check previous step logs."
            exit 1
          fi

          # Fix permissions on deploy directory (built with sudo)
          sudo chown -R runner:runner "${DEPLOY_DIR}"

          # Find the built image
          IMAGE_FILE=$(ls ${DEPLOY_DIR}/*.img 2>/dev/null | head -n 1)
          if [ -z "$IMAGE_FILE" ]; then
            echo "‚ùå Error: No image file found!"
            echo "Contents of deploy directory:"
            ls -la ${DEPLOY_DIR}/ || echo "Directory is empty or inaccessible"
            exit 1
          fi          echo "Found image: $IMAGE_FILE"

          # Create versioned filename
          VERSIONED_IMAGE="RaspberryPi_HDMI_Tester_v${VERSION}.img"
          VERSIONED_ZIP="RaspberryPi_HDMI_Tester_v${VERSION}.img.zip"
          CHECKSUM_FILE="RaspberryPi_HDMI_Tester_v${VERSION}.sha256"

          # Copy and rename image
          cp "$IMAGE_FILE" "${DEPLOY_DIR}/${VERSIONED_IMAGE}"

          # Compress image
          echo "üóúÔ∏è  Compressing image..."
          cd ${DEPLOY_DIR}
          zip "${VERSIONED_ZIP}" "${VERSIONED_IMAGE}"

          # Generate SHA256 checksum
          echo "üîê Generating checksum..."
          sha256sum "${VERSIONED_ZIP}" > "${CHECKSUM_FILE}"

          # Get file sizes
          IMAGE_SIZE=$(ls -lh "${VERSIONED_IMAGE}" | awk '{print $5}')
          ZIP_SIZE=$(ls -lh "${VERSIONED_ZIP}" | awk '{print $5}')

          echo "image_size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
          echo "zip_size=$ZIP_SIZE" >> $GITHUB_OUTPUT
          echo "zip_path=${DEPLOY_DIR}/${VERSIONED_ZIP}" >> $GITHUB_OUTPUT
          echo "checksum_path=${DEPLOY_DIR}/${CHECKSUM_FILE}" >> $GITHUB_OUTPUT

          echo "‚úÖ Assets prepared"
          echo "   Image size: $IMAGE_SIZE"
          echo "   Compressed: $ZIP_SIZE"

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.config.outputs.version }}"

          # Read config and generate notes
          cat > release_notes.md << 'EOF'
          # Raspberry Pi HDMI Tester v${{ steps.config.outputs.version }}

          ## üì¶ Release: ${{ steps.config.outputs.name }}

          **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}

          ---

          ## ‚ú® Features

          $(jq -r '.release_notes.features[] | "- " + .' .github/release-config.json)

          ## üîß Compatibility

          Tested and compatible with:
          $(jq -r '.release_notes.compatibility[] | "- " + .' .github/release-config.json)

          ## ‚ö†Ô∏è Known Issues

          $(jq -r '.release_notes.known_issues[] | "- " + .' .github/release-config.json)

          ---

          ## üì• Installation

          ### Quick Start (Windows 11)

          1. **Download** `RaspberryPi_HDMI_Tester_v${{ steps.config.outputs.version }}.img.zip`
          2. **Extract** the `.img` file from the ZIP archive
          3. **Flash** to SD card using [Raspberry Pi Imager](https://www.raspberrypi.com/software/)
          4. **Insert** SD card into Raspberry Pi
          5. **Connect** HDMI to display
          6. **Power on** - it will boot automatically!

          ### Verification

          Verify the download integrity:
          ```bash
          sha256sum -c RaspberryPi_HDMI_Tester_v${{ steps.config.outputs.version }}.sha256
          ```

          ### Full Documentation

          - üìñ [Building Guide](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/blob/main/docs/BUILDING.md)
          - üíæ [Flashing Guide](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/blob/main/docs/FLASHING.md)
          - üé® [Customization Guide](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/blob/main/docs/CUSTOMIZATION.md)
          - üîß [Troubleshooting Guide](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/blob/main/docs/TROUBLESHOOTING.md)

          ---

          ## üìä Build Information

          - **Base OS:** $(jq -r '.build.base_os' .github/release-config.json)
          - **Build System:** $(jq -r '.build.build_system' .github/release-config.json)
          - **Image Size:** ${{ steps.assets.outputs.image_size }}
          - **Compressed Size:** ${{ steps.assets.outputs.zip_size }}

          ---

          ## üêõ Issues & Support

          Found a bug? Have a question?
          - [Report an Issue](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/issues)
          - [View Documentation](https://github.com/benpaddlejones/Raspberry_HDMI_Tester#readme)
          EOF

          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.config.outputs.tag }}
          name: "v${{ steps.config.outputs.version }} - ${{ steps.config.outputs.name }}"
          body_path: release_notes.md
          files: |
            ${{ steps.assets.outputs.zip_path }}
            ${{ steps.assets.outputs.checksum_path }}
          draft: false
          prerelease: ${{ steps.config.outputs.prerelease }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with release link
        run: |
          VERSION="${{ steps.config.outputs.version }}"
          TAG="${{ steps.config.outputs.tag }}"

          # Create download section content
          cat > download_section.md << 'DOWNLOADEOF'

          ## üì• Download

          [![Latest Release](https://img.shields.io/github/v/release/benpaddlejones/Raspberry_HDMI_Tester?label=Latest%20Release&style=for-the-badge)](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases/latest)
          [![Downloads](https://img.shields.io/github/downloads/benpaddlejones/Raspberry_HDMI_Tester/total?style=for-the-badge)](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases)

          **Latest Version:** [VERSION_TAG](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases/tag/VERSION_TAG)

          Download the pre-built image:
          - üíæ [RaspberryPi_HDMI_Tester_VERSION_NUM.img.zip](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases/download/VERSION_TAG/RaspberryPi_HDMI_Tester_VERSION_NUM.img.zip)
          - üîê [SHA256 Checksum](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases/download/VERSION_TAG/RaspberryPi_HDMI_Tester_VERSION_NUM.sha256)

          See [FLASHING.md](docs/FLASHING.md) for installation instructions.

          DOWNLOADEOF

          # Replace placeholders
          sed -i "s/VERSION_TAG/$TAG/g" download_section.md
          sed -i "s/VERSION_NUM/v$VERSION/g" download_section.md

          # Insert or update Download section
          if ! grep -q "## üì• Download" README.md; then
            # Add Download section after Project Overview
            sed -i '/## Project Overview/r download_section.md' README.md
            echo "‚úÖ Download section added to README"
          else
            echo "‚ÑπÔ∏è  Download section already exists - skipping update"
          fi

          rm -f download_section.md

      - name: Commit README changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add README.md

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: Update README with release v${{ steps.config.outputs.version }} links [skip ci]"
            git push
            echo "‚úÖ README changes committed and pushed"
          fi

      - name: Push failed build logs
        if: failure()
        run: |
          # If build failed, push the committed logs now
          echo "üìù Pushing failed build logs to repository..."

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git pull --rebase || true
          git push || echo "‚ö†Ô∏è  Failed to push logs (may already be pushed)"

          echo "‚úÖ Failed build logs pushed"

      - name: Build summary
        if: always()
        run: |
          BUILD_EXIT_CODE="${{ env.BUILD_EXIT_CODE }}"
          BUILD_TIMESTAMP="${{ env.BUILD_TIMESTAMP }}"

          if [ "${BUILD_EXIT_CODE}" = "0" ]; then
            echo "## üéâ Release Build Complete!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** v${{ steps.config.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ steps.config.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**Pre-release:** ${{ steps.config.outputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì¶ Assets Created:" >> $GITHUB_STEP_SUMMARY
            echo "- Image (compressed): ${{ steps.assets.outputs.zip_size }}" >> $GITHUB_STEP_SUMMARY
            echo "- Image (uncompressed): ${{ steps.assets.outputs.image_size }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Release URL:" >> $GITHUB_STEP_SUMMARY
            echo "[View Release](https://github.com/benpaddlejones/Raspberry_HDMI_Tester/releases/tag/${{ steps.config.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Timestamp:** ${BUILD_TIMESTAMP}" >> $GITHUB_STEP_SUMMARY
            echo "**Exit Code:** ${BUILD_EXIT_CODE}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Build Logs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Detailed Log (Artifact):** Available in workflow artifacts (retained for 90 days)" >> $GITHUB_STEP_SUMMARY
          echo "- **Committed Log:** Check \`logs/\` directory in repository" >> $GITHUB_STEP_SUMMARY

          if [ -f "build/pi-gen-work/build-detailed.log" ]; then
            LOG_SIZE=$(stat -f%z "build/pi-gen-work/build-detailed.log" 2>/dev/null || stat -c%s "build/pi-gen-work/build-detailed.log")
            LOG_SIZE_MB=$(( LOG_SIZE / 1048576 ))
            echo "- **Log Size:** ${LOG_SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
          fi

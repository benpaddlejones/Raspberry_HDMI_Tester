#!/bin/bash
# HDMI Tester Diagnostics Script
# Captures complete system state, logs, and journals for troubleshooting

TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
DIAG_DIR="/tmp/hdmi-diagnostics-${TIMESTAMP}"
REPORT_FILE="${DIAG_DIR}/diagnostic-report.txt"
ARCHIVE_FILE="/tmp/hdmi-diagnostics-${TIMESTAMP}.tar.gz"

# Initialize USB variables (used later in script)
USB_FOUND=false
USB_MOUNT_POINT=""
USB_DEVICE=""

# Check if running as root (required for USB auto-save)
if [ "$EUID" -ne 0 ]; then
    RUNNING_AS_ROOT=false
    echo "⚠️  WARNING: Not running as root - USB auto-save will be disabled"
    echo "   To enable USB auto-save, run: sudo /opt/hdmi-tester/hdmi-diagnostics"
    echo ""
else
    RUNNING_AS_ROOT=true
fi

echo "==========================================="
echo "HDMI Tester Diagnostics"
echo "==========================================="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo "Running as: $(whoami)"
echo "USB auto-save: $([ "$RUNNING_AS_ROOT" = true ] && echo "enabled" || echo "disabled")"
echo "Creating diagnostic bundle..."
echo ""

# Create diagnostics directory
mkdir -p "${DIAG_DIR}"

# Start comprehensive report
{
    echo "==========================================="
    echo "HDMI TESTER DIAGNOSTIC REPORT"
    echo "==========================================="
    echo "Generated: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "Hostname: $(hostname)"
    echo "Report Directory: ${DIAG_DIR}"
    echo ""

    # ============================================
    # SYSTEM IDENTIFICATION
    # ============================================
    echo "==========================================="
    echo "SYSTEM IDENTIFICATION"
    echo "==========================================="
    echo ""

    echo "=== Hostname and Network ==="
    echo "Hostname: $(hostname)"
    echo "FQDN: $(hostname -f 2>/dev/null || echo 'N/A')"
    echo "IP Addresses:"
    ip addr show 2>&1 | grep -E "inet |inet6 " || echo "No network configuration"
    echo ""

    echo "=== OS Information ==="
    cat /etc/os-release 2>&1 || echo "OS release info not available"
    echo ""
    echo "Kernel: $(uname -a)"
    echo "Architecture: $(uname -m)"
    echo ""

    echo "=== Raspberry Pi Model ==="
    if [ -f /proc/device-tree/model ]; then
        cat /proc/device-tree/model 2>&1
        echo ""
    else
        echo "Model information not available"
    fi
    echo ""

    echo "=== CPU Information ==="
    cat /proc/cpuinfo 2>&1
    echo ""

    echo "=== Memory Information ==="
    free -h
    echo ""
    cat /proc/meminfo 2>&1
    echo ""

    # ============================================
    # RASPBERRY PI SPECIFIC
    # ============================================
    echo "==========================================="
    echo "RASPBERRY PI HARDWARE"
    echo "==========================================="
    echo ""

    echo "=== GPU Memory ==="
    vcgencmd get_mem arm 2>&1 || echo "vcgencmd not available"
    vcgencmd get_mem gpu 2>&1 || echo "vcgencmd not available"
    echo ""

    echo "=== CPU Temperature ==="
    vcgencmd measure_temp 2>&1 || echo "Temperature not available"
    echo ""

    echo "=== CPU Frequency ==="
    vcgencmd measure_clock arm 2>&1 || echo "Clock frequency not available"
    vcgencmd measure_clock core 2>&1 || echo "Core clock not available"
    vcgencmd measure_clock h264 2>&1 || echo "H264 clock not available"
    vcgencmd measure_clock isp 2>&1 || echo "ISP clock not available"
    vcgencmd measure_clock v3d 2>&1 || echo "V3D clock not available"
    echo ""

    echo "=== Voltage ==="
    vcgencmd measure_volts core 2>&1 || echo "Voltage not available"
    vcgencmd measure_volts sdram_c 2>&1 || echo "SDRAM voltage not available"
    echo ""

    echo "=== Throttling Status ==="
    vcgencmd get_throttled 2>&1 || echo "Throttling status not available"
    echo ""
    echo "Throttling codes:"
    echo "  0x0     = No throttling"
    echo "  0x1     = Under-voltage detected"
    echo "  0x2     = Arm frequency capped"
    echo "  0x4     = Currently throttled"
    echo "  0x8     = Soft temperature limit active"
    echo "  0x10000 = Under-voltage has occurred"
    echo "  0x20000 = Arm frequency capping has occurred"
    echo "  0x40000 = Throttling has occurred"
    echo "  0x80000 = Soft temperature limit has occurred"
    echo ""

    # ============================================
    # BOOT CONFIGURATION
    # ============================================
    echo "==========================================="
    echo "BOOT CONFIGURATION"
    echo "==========================================="
    echo ""

    echo "=== Boot Config (config.txt) ==="
    if [ -f /boot/firmware/config.txt ]; then
        echo "File: /boot/firmware/config.txt"
        cat /boot/firmware/config.txt 2>&1
    elif [ -f /boot/config.txt ]; then
        echo "File: /boot/config.txt"
        cat /boot/config.txt 2>&1
    else
        echo "Boot config not found"
    fi
    echo ""

    echo "=== Kernel Command Line ==="
    if [ -f /boot/firmware/cmdline.txt ]; then
        echo "File: /boot/firmware/cmdline.txt"
        cat /boot/firmware/cmdline.txt 2>&1
    elif [ -f /boot/cmdline.txt ]; then
        echo "File: /boot/cmdline.txt"
        cat /boot/cmdline.txt 2>&1
    else
        echo "Cmdline not found"
    fi
    echo ""
    cat /proc/cmdline 2>&1
    echo ""

    # ============================================
    # DISPLAY CONFIGURATION
    # ============================================
    echo "==========================================="
    echo "DISPLAY & HDMI CONFIGURATION"
    echo "==========================================="
    echo ""

    echo "=== HDMI Status ==="
    tvservice -s 2>&1 || echo "tvservice not available"
    tvservice -n 2>&1 || echo "Display name not available"
    echo ""

    echo "=== Available HDMI Modes (CEA) ==="
    tvservice -m CEA 2>&1 || echo "CEA modes not available"
    echo ""

    echo "=== Available HDMI Modes (DMT) ==="
    tvservice -m DMT 2>&1 || echo "DMT modes not available"
    echo ""

    echo "=== DRM Devices ==="
    if [ -d /dev/dri/ ]; then
        ls -lah /dev/dri/ 2>&1
        echo ""
        for device in /dev/dri/*; do
            if [ -e "$device" ]; then
                echo "Device: $device"
                stat "$device" 2>&1
                echo ""
            fi
        done
    else
        echo "No /dev/dri/ found"
    fi
    echo ""

    echo "=== Connected Displays (DRM) ==="
    for status_file in /sys/class/drm/card*/status; do
        if [ -f "$status_file" ]; then
            card=$(echo "$status_file" | cut -d/ -f5)
            status=$(cat "$status_file" 2>&1)
            echo "  $card: $status"

            # Get EDID if available
            edid_file=$(dirname "$status_file")/edid
            if [ -f "$edid_file" ] && [ -s "$edid_file" ]; then
                echo "    EDID available: $(stat -c%s "$edid_file") bytes"
            fi
        fi
    done
    echo ""

    echo "=== Framebuffer Information ==="
    fbset 2>&1 || echo "fbset not available"
    echo ""
    if [ -e /dev/fb0 ]; then
        echo "Framebuffer device /dev/fb0:"
        stat /dev/fb0 2>&1
        cat /sys/class/graphics/fb0/virtual_size 2>&1 || echo "Virtual size not available"
        cat /sys/class/graphics/fb0/bits_per_pixel 2>&1 || echo "BPP not available"
    fi
    echo ""

    # ============================================
    # AUDIO CONFIGURATION
    # ============================================
    echo "==========================================="
    echo "AUDIO CONFIGURATION"
    echo "==========================================="
    echo ""

    echo "=== ALSA Devices ==="
    aplay -l 2>&1
    echo ""

    echo "=== ALSA Card Information ==="
    cat /proc/asound/cards 2>&1 || echo "No ALSA cards"
    echo ""

    echo "=== ALSA PCM Information ==="
    cat /proc/asound/pcm 2>&1 || echo "No PCM info"
    echo ""

    echo "=== PulseAudio Status ==="
    pactl info 2>&1 || echo "PulseAudio not available"
    echo ""

    echo "=== PulseAudio Sinks ==="
    pactl list sinks 2>&1 || echo "No sinks available"
    echo ""

    echo "=== PulseAudio Sources ==="
    pactl list sources 2>&1 || echo "No sources available"
    echo ""

    echo "=== Audio Mixer Settings ==="
    amixer 2>&1 || echo "amixer not available"
    echo ""

    # ============================================
    # VIDEO FILES
    # ============================================
echo "==========================================="
echo "VIDEO TEST FILES"
echo "==========================================="
echo ""

if [ -d /opt/hdmi-tester ]; then
    for video in /opt/hdmi-tester/*.webm /opt/hdmi-tester/*.mp4 /opt/hdmi-tester/*.mkv; do
        if [ -f "$video" ]; then
            echo "=== File: $video ==="
            ls -lh "$video"
            file "$video"
            stat "$video"
            echo "MD5: $(md5sum "$video" | cut -d' ' -f1)"
            echo ""

            if command -v ffprobe &> /dev/null; then
                echo "Video Metadata:"
                ffprobe -v quiet -print_format json -show_format -show_streams "$video" 2>&1
                echo ""
            fi
        fi
    done

    # Check if any video files exist
    VIDEO_FILES_EXIST=false
    for ext in webm mp4; do
        if compgen -G "/opt/hdmi-tester/*.${ext}" > /dev/null; then
            VIDEO_FILES_EXIST=true
            break
        fi
    done

    if [ "${VIDEO_FILES_EXIST}" = "false" ]; then
        echo "⚠️  WARNING: No video files found in /opt/hdmi-tester/"
    fi
else
    echo "⚠️  WARNING: /opt/hdmi-tester directory not found"
fi
echo ""

    # ============================================
    # INSTALLED SOFTWARE
    # ============================================
    echo "==========================================="
    echo "INSTALLED SOFTWARE"
    echo "==========================================="
    echo ""

    echo "=== VLC Version ==="
    cvlc --version 2>&1 || echo "VLC not installed"
    echo ""

    echo "=== FFmpeg Version ==="
    ffmpeg -version 2>&1 || echo "FFmpeg not installed"
    echo ""

    echo "=== FFprobe Version ==="
    ffprobe -version 2>&1 || echo "FFprobe not installed"
    echo ""

    echo "=== Installed Video Codecs ==="
    dpkg -l | grep -E "libvpx|libopus|libvorbis|libx264|libx265|libav|ffmpeg" 2>&1 || echo "No codec packages found"
    echo ""

    # ============================================
    # SYSTEMD SERVICES
    # ============================================
    echo "==========================================="
    echo "SYSTEMD SERVICES"
    echo "==========================================="
    echo ""

    echo "=== HDMI Test Services Status ==="
    for service in image-test hdmi-test pixel-test audio-test test-notvideo full-test; do
        echo "--- ${service}.service ---"
        systemctl status "${service}.service" 2>&1 || echo "Service not found"
        echo ""
    done

    echo "=== All Failed Services ==="
    systemctl --failed 2>&1
    echo ""

    echo "=== Boot Time Analysis ==="
    systemd-analyze 2>&1 || echo "systemd-analyze not available"
    echo ""
    systemd-analyze blame 2>&1 | head -20 || echo "Blame not available"
    echo ""

    # ============================================
    # RUNNING PROCESSES
    # ============================================
    echo "==========================================="
    echo "RUNNING PROCESSES"
    echo "==========================================="
    echo ""

    echo "=== Video Processes ==="
    ps aux | grep -E "vlc|ffmpeg|ffplay" | grep -v grep || echo "No video processes running"
    echo ""

    echo "=== All Processes ==="
    ps auxf 2>&1
    echo ""

    echo "=== Process Tree ==="
    pstree -p 2>&1 || echo "pstree not available"
    echo ""

    # ============================================
    # SYSTEM RESOURCES
    # ============================================
    echo "==========================================="
    echo "SYSTEM RESOURCES"
    echo "==========================================="
    echo ""

    echo "=== Uptime ==="
    uptime
    echo ""

    echo "=== Load Average ==="
    cat /proc/loadavg
    echo ""

    echo "=== Memory Usage ==="
    free -h
    echo ""

    echo "=== Disk Usage ==="
    df -h
    echo ""

    echo "=== Disk I/O Statistics ==="
    iostat 2>&1 || echo "iostat not available"
    echo ""

    echo "=== Mount Points ==="
    mount 2>&1
    echo ""

    echo "=== Block Devices ==="
    lsblk 2>&1 || echo "lsblk not available"
    echo ""

    # ============================================
    # NETWORK CONFIGURATION
    # ============================================
    echo "==========================================="
    echo "NETWORK CONFIGURATION"
    echo "==========================================="
    echo ""

    echo "=== Network Interfaces ==="
    ip addr show 2>&1
    echo ""

    echo "=== Routing Table ==="
    ip route show 2>&1
    echo ""

    echo "=== DNS Configuration ==="
    cat /etc/resolv.conf 2>&1 || echo "No resolv.conf"
    echo ""

    echo "=== Network Statistics ==="
    netstat -s 2>&1 || ss -s 2>&1 || echo "Network stats not available"
    echo ""

    # ============================================
    # ENVIRONMENT
    # ============================================
    echo "==========================================="
    echo "ENVIRONMENT VARIABLES"
    echo "==========================================="
    echo ""
    env | sort
    echo ""

    # ============================================
    # KERNEL MODULES
    # ============================================
    echo "==========================================="
    echo "KERNEL MODULES"
    echo "==========================================="
    echo ""

    echo "=== Loaded Modules ==="
    lsmod 2>&1
    echo ""

    echo "=== DRM Modules ==="
    lsmod | grep drm 2>&1 || echo "No DRM modules"
    echo ""

    echo "=== Video Modules ==="
    lsmod | grep -E "vc4|v3d|hdmi" 2>&1 || echo "No video modules"
    echo ""

    # ============================================
    # USB DEVICES
    # ============================================
    echo "==========================================="
    echo "USB DEVICES"
    echo "==========================================="
    echo ""
    lsusb 2>&1 || echo "lsusb not available"
    echo ""

    # ============================================
    # PERMISSIONS
    # ============================================
    echo "==========================================="
    echo "FILE PERMISSIONS"
    echo "==========================================="
    echo ""

    echo "=== Test Script Permissions ==="
    ls -lh /usr/local/bin/test-* 2>&1 || echo "No test scripts found"
    echo ""

    echo "=== Video File Permissions ==="
    ls -lh /opt/hdmi-tester/ 2>&1 || echo "No video directory"
    echo ""

    echo "=== Device Permissions ==="
    ls -lh /dev/dri/ /dev/fb* /dev/video* /dev/snd/* 2>&1 || echo "Devices not found"
    echo ""

    echo "=== User Groups ==="
    groups 2>&1
    echo ""

} > "${REPORT_FILE}" 2>&1

echo "✓ System information captured"

# ============================================
# COPY LOG FILES
# ============================================
echo "Collecting log files..."

# Test script logs
mkdir -p "${DIAG_DIR}/test-logs"
cp /tmp/test-*.log "${DIAG_DIR}/test-logs/" 2>/dev/null && echo "✓ Test logs copied" || echo "  No test logs found"

# System logs
mkdir -p "${DIAG_DIR}/system-logs"
cp /var/log/syslog "${DIAG_DIR}/system-logs/" 2>/dev/null || echo "  syslog not found"
cp /var/log/messages "${DIAG_DIR}/system-logs/" 2>/dev/null || echo "  messages not found"
cp /var/log/kern.log "${DIAG_DIR}/system-logs/" 2>/dev/null || echo "  kern.log not found"
cp /var/log/daemon.log "${DIAG_DIR}/system-logs/" 2>/dev/null || echo "  daemon.log not found"
echo "✓ System logs collected"

# Boot logs
mkdir -p "${DIAG_DIR}/boot-logs"
dmesg > "${DIAG_DIR}/boot-logs/dmesg.txt" 2>&1
dmesg -T > "${DIAG_DIR}/boot-logs/dmesg-timestamp.txt" 2>&1
echo "✓ Boot logs captured"

# ============================================
# SYSTEMD JOURNALS
# ============================================
echo "Extracting systemd journals..."

mkdir -p "${DIAG_DIR}/journals"

# Current boot journal
journalctl -b 0 > "${DIAG_DIR}/journals/current-boot.log" 2>&1
echo "✓ Current boot journal"

# Previous boot journal
journalctl -b -1 > "${DIAG_DIR}/journals/previous-boot.log" 2>&1
echo "✓ Previous boot journal"

# Service-specific journals
for service in image-test hdmi-test pixel-test audio-test test-notvideo full-test; do
    journalctl -u "${service}.service" --no-pager > "${DIAG_DIR}/journals/${service}-service.log" 2>&1
done
echo "✓ Service journals extracted"

# Kernel messages
journalctl -k > "${DIAG_DIR}/journals/kernel.log" 2>&1
echo "✓ Kernel journal"

# Priority filtered journals
journalctl -p err -b 0 > "${DIAG_DIR}/journals/errors-current-boot.log" 2>&1
journalctl -p warning -b 0 > "${DIAG_DIR}/journals/warnings-current-boot.log" 2>&1
echo "✓ Error and warning logs"

# Last 1000 lines of journal
journalctl -n 1000 --no-pager > "${DIAG_DIR}/journals/last-1000-lines.log" 2>&1
echo "✓ Recent journal entries"

# ============================================
# CONFIGURATION FILES
# ============================================
echo "Copying configuration files..."

mkdir -p "${DIAG_DIR}/configs"
cp /boot/firmware/config.txt "${DIAG_DIR}/configs/" 2>/dev/null || cp /boot/config.txt "${DIAG_DIR}/configs/" 2>/dev/null
cp /boot/firmware/cmdline.txt "${DIAG_DIR}/configs/" 2>/dev/null || cp /boot/cmdline.txt "${DIAG_DIR}/configs/" 2>/dev/null
cp /etc/systemd/system/*.service "${DIAG_DIR}/configs/" 2>/dev/null
echo "✓ Configuration files copied"

# ============================================
# CREATE SUMMARY
# ============================================
echo "Creating summary..."

cat > "${DIAG_DIR}/README.txt" << 'EOF'
HDMI TESTER DIAGNOSTICS BUNDLE
===============================

This archive contains complete diagnostic information for troubleshooting
the Raspberry Pi HDMI Tester.

DIRECTORY STRUCTURE:
--------------------

diagnostic-report.txt    - Complete system information report
README.txt              - This file

test-logs/              - Logs from test script executions
  hdmi-test.log
  pixel-test.log
  audio-test.log
  full-test.log

system-logs/            - System log files
  syslog
  kern.log
  daemon.log
  messages

boot-logs/              - Boot and kernel logs
  dmesg.txt
  dmesg-timestamp.txt

journals/               - Systemd journal exports
  current-boot.log      - Full journal from current boot
  previous-boot.log     - Full journal from previous boot
  kernel.log            - Kernel messages only
  errors-current-boot.log
  warnings-current-boot.log
  *-service.log         - Individual service logs
  last-1000-lines.log   - Most recent journal entries

configs/                - Configuration files
  config.txt            - Boot configuration
  cmdline.txt           - Kernel command line
  *.service             - Systemd service files

HOW TO USE:
-----------

1. Review diagnostic-report.txt for system overview
2. Check journals/ for runtime issues
3. Look at test-logs/ for specific test failures
4. Review configs/ for configuration problems

COMMON ISSUES:
--------------

No Display:
  - Check HDMI configuration in configs/config.txt
  - Review DRM device info in diagnostic-report.txt
  - Check for errors in journals/kernel.log

No Audio:
  - Review audio configuration in diagnostic-report.txt
  - Check ALSA device status
  - Look for audio errors in service logs

Service Failures:
  - Check journals/*-service.log
  - Review systemd status in diagnostic-report.txt
  - Look for permission issues

Performance Issues:
  - Check throttling status in diagnostic-report.txt
  - Review CPU temperature and voltage
  - Check memory usage and disk space

EOF

echo "✓ Summary created"

# ============================================
# CREATE ARCHIVE
# ============================================
echo ""
echo "Creating compressed archive..."

cd /tmp || exit 1
tar -czf "${ARCHIVE_FILE}" "hdmi-diagnostics-${TIMESTAMP}/" 2>&1
ARCHIVE_SIZE=$(ls -lh "${ARCHIVE_FILE}" | awk '{print $5}')

# ============================================
# CHECK FOR USB DRIVE AND AUTO-SAVE
# ============================================
echo ""
echo "==========================================="
echo "CHECKING FOR USB DRIVE"
echo "==========================================="

# Skip USB auto-save if not running as root
if [ "$RUNNING_AS_ROOT" = false ]; then
    echo "⚠️  USB auto-save skipped (not running as root)"
    echo ""
    echo "Diagnostics saved locally: ${ARCHIVE_FILE}"
    echo ""
    echo "To enable USB auto-save, run with sudo:"
    echo "  sudo /opt/hdmi-tester/hdmi-diagnostics"
    echo ""
else
    # USB auto-save code (only runs as root)
    USB_FOUND=false
    USB_MOUNT_POINT=""
    USB_DEVICE=""

    # List all block devices for debugging
    echo "Available block devices:"
    lsblk -o NAME,SIZE,TYPE,MOUNTPOINT 2>&1 || echo "  lsblk not available"
    echo ""

    echo "Checking for removable USB devices..."
    echo ""

    # Build a list of potential USB devices
    USB_DEVICES=()

    # Method 1: Check /sys/block for removable devices
    for device in /sys/block/sd*; do
        if [ -d "${device}" ]; then
            device_name=$(basename "${device}")
            removable=$(cat "${device}/removable" 2>/dev/null || echo "0")
            if [ "${removable}" = "1" ]; then
                echo "Found removable device: /dev/${device_name}"

                # Check for partitions (look for partition subdirectories)
                if [ -b "/dev/${device_name}1" ]; then
                    USB_DEVICES+=("/dev/${device_name}1")
                    echo "  → Has partition 1: /dev/${device_name}1"
                fi

                # Also try the device itself (no partition number)
                USB_DEVICES+=("/dev/${device_name}")
                echo "  → Also trying: /dev/${device_name}"
            fi
        fi
        done

    # Method 2: Fallback - check common USB device paths
    if [ ${#USB_DEVICES[@]} -eq 0 ]; then
        echo "No removable devices found, checking common paths..."
        for device in /dev/sda1 /dev/sda /dev/sdb1 /dev/sdb /dev/sdc1 /dev/sdc; do
            if [ -b "${device}" ]; then
                USB_DEVICES+=("${device}")
                echo "  → Found block device: ${device}"
            fi
        done
    fi

    # If no devices found
    if [ ${#USB_DEVICES[@]} -eq 0 ]; then
    echo "❌ No USB devices found"
    echo ""
    echo "Diagnostics saved locally: ${ARCHIVE_FILE}"
    echo "You can copy manually after inserting USB drive."
else
    echo ""
    echo "Attempting to mount ${#USB_DEVICES[@]} device(s)..."
    echo ""

    # Try each device
    for device in "${USB_DEVICES[@]}"; do
        if [ -b "${device}" ]; then
            echo "Trying device: ${device}"

            # Create temporary mount point
            TEMP_MOUNT="/mnt/usb-diagnostics-${TIMESTAMP}"
            mkdir -p "${TEMP_MOUNT}"

            # Try to mount (try multiple filesystem types)
            MOUNTED=false
            for fstype in vfat exfat ext4 ext3 ext2 auto; do
                if mount -t "${fstype}" "${device}" "${TEMP_MOUNT}" 2>/dev/null; then
                    echo "  ✓ Successfully mounted as ${fstype}"
                    MOUNTED=true
                    break
                fi
            done

            if [ "${MOUNTED}" = "true" ]; then
                # Check if writable
                if touch "${TEMP_MOUNT}/.test_write_${TIMESTAMP}" 2>/dev/null; then
                    rm -f "${TEMP_MOUNT}/.test_write_${TIMESTAMP}"
                    echo "  ✓ USB drive is writable"

                    # Copy archive to USB
                    echo "  Copying diagnostics to USB..."
                    if cp -v "${ARCHIVE_FILE}" "${TEMP_MOUNT}/" 2>&1; then
                        USB_FOUND=true
                        USB_MOUNT_POINT="${TEMP_MOUNT}"
                        USB_DEVICE="${device}"

                        # Set permissions so files are readable by everyone
                        chmod 644 "${TEMP_MOUNT}/$(basename "${ARCHIVE_FILE}")" 2>/dev/null || true
                        echo "  ✅ Archive saved: $(basename "${ARCHIVE_FILE}")"

                        # Also copy the uncompressed report for quick viewing
                        if cp -v "${REPORT_FILE}" "${TEMP_MOUNT}/diagnostic-report.txt" 2>&1; then
                            # Set permissions on report file
                            chmod 644 "${TEMP_MOUNT}/diagnostic-report.txt" 2>/dev/null || true
                            echo "  ✅ Report saved: diagnostic-report.txt"
                        fi

                        # Sync and verify
                        sync
                        echo "  ✓ Data synced to USB"

                        # Verify files exist
                        if [ -f "${TEMP_MOUNT}/$(basename "${ARCHIVE_FILE}")" ]; then
                            FILE_SIZE=$(ls -lh "${TEMP_MOUNT}/$(basename "${ARCHIVE_FILE}")" | awk '{print $5}')
                            echo "  ✓ Verified: $(basename "${ARCHIVE_FILE}") (${FILE_SIZE})"
                        fi

                        # Don't unmount yet - let user see the success message
                        echo ""
                        echo "✅ SUCCESS! Files copied to USB: ${device}"
                        break
                    else
                        echo "  ❌ Failed to copy to USB"
                        umount "${TEMP_MOUNT}" 2>/dev/null
                        rmdir "${TEMP_MOUNT}" 2>/dev/null
                    fi
                else
                    echo "  ⚠️  USB drive is read-only or no write permission"
                    umount "${TEMP_MOUNT}" 2>/dev/null
                    rmdir "${TEMP_MOUNT}" 2>/dev/null
                fi
            else
                echo "  ⚠️  Could not mount ${device}"
                rmdir "${TEMP_MOUNT}" 2>/dev/null
            fi
        fi
    done

    if [ "${USB_FOUND}" = "false" ]; then
        echo ""
        echo "❌ Could not mount any USB drive for writing"
        echo "Diagnostics saved locally: ${ARCHIVE_FILE}"
    fi
fi  # End of USB device check (no devices found vs devices found)
fi  # End of root permission check for USB operations

echo ""
echo "==========================================="
echo "DIAGNOSTICS COMPLETE"
echo "==========================================="
echo ""
echo "Archive created: ${ARCHIVE_FILE}"
echo "Archive size: ${ARCHIVE_SIZE}"
echo ""

if [ "${USB_FOUND}" = "true" ]; then
    echo "📁 SAVED TO USB: ${USB_DEVICE}"
    echo "   Files:"
    echo "     • $(basename "${ARCHIVE_FILE}")"
    echo "     • diagnostic-report.txt"
    echo ""

    # Unmount USB drive safely (only if we actually mounted it)
    if [ -n "${USB_MOUNT_POINT}" ] && [ -d "${USB_MOUNT_POINT}" ] && mountpoint -q "${USB_MOUNT_POINT}" 2>/dev/null; then
        echo "Safely unmounting USB drive..."
        sync
        if umount "${USB_MOUNT_POINT}" 2>/dev/null; then
            echo "✓ USB drive unmounted successfully"
            rmdir "${USB_MOUNT_POINT}" 2>/dev/null
            echo ""
            echo "✅ You can now safely remove the USB drive."
        else
            echo "⚠️  Could not unmount USB drive. Please unmount manually:"
            echo "   sudo umount ${USB_MOUNT_POINT}"
        fi
    fi
    echo ""
fi

echo "Local copies:"
echo "  Archive: ${ARCHIVE_FILE}"
echo "  Report:  ${REPORT_FILE}"
echo "  Directory: ${DIAG_DIR}"
echo ""
echo "To view the report:"
echo "  less ${REPORT_FILE}"
echo ""
echo "To extract the archive:"
echo "  tar -xzf ${ARCHIVE_FILE}"
echo ""

if [ "${USB_FOUND}" = "false" ]; then
    echo "To copy to a USB drive manually:"
    echo "  1. Insert USB drive and wait a few seconds"
    echo "  2. Check device name: lsblk"
    echo "  3. sudo mount /dev/sda1 /mnt"
    echo "  4. sudo cp ${ARCHIVE_FILE} /mnt/"
    echo "  5. sudo cp ${REPORT_FILE} /mnt/diagnostic-report.txt"
    echo "  6. sudo sync"
    echo "  7. sudo umount /mnt"
    echo ""
fi

echo "To copy to another system (if network is available):"
echo "  scp ${ARCHIVE_FILE} user@hostname:/path/"
echo ""
echo "==========================================="
